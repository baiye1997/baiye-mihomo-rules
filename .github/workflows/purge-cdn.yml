name: Purge CDN

on:
  push:
    branches: ['**']
    tags-ignore: ['**']   # 忽略 tag push，避免 Release 触发
    paths:
      - "rules/ip/**"
      - "rules/non_ip/**"
      - "rules/domainset/**"
      - "rules/yaml/**"
      - "icons/**"
      - "config/*.yaml"
      - "config/*.yml"
  workflow_dispatch:
    inputs:
      force_purge:
        description: "Force purge all referenced icons/rules from configs (ignore diff)"
        type: boolean
        default: false

concurrency:
  group: release-and-purge
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  release_purge:
    # tag push 直接跳过（保险）
    if: ${{ github.event_name != 'push' || startsWith(github.ref, 'refs/heads/') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # push 两种：分支/标签。若是标签，这里仍 checkout 到 main，避免 diff 异常
          ref: ${{ startsWith(github.ref, 'refs/tags/') && 'main' || github.ref }}

      - name: Detect targets to purge
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          STEP_SUMMARY="${GITHUB_STEP_SUMMARY:-}"

          echo "## Purge detect" >> "$STEP_SUMMARY"
          echo "" >> "$STEP_SUMMARY"

          shopt -s nullglob
          CONFIGS=(config/*.yml config/*.yaml)

          # 工具函数：把路径标准化（去掉前缀 ./）、只保留我们关心的目录，并且去重
          normalize_and_filter() {
            # 只要 icons/** 或 rules/(ip|non_ip|domainset|yaml)/** 或 config/*.ya?ml
            grep -Eo '(\./)?(icons/[^"'"'"' ]+|rules/(ip|non_ip|domainset|yaml)/[^"'"'"' ]+|config/[^/"]+\.ya?ml)' \
            | sed -E 's#^\./##' \
            | grep -E '^(icons/|rules/(ip|non_ip|domainset|yaml)/|config/[^/]+\.ya?ml)$' \
            | sort -u

          }

          : > referenced.targets.txt

          if [[ "${{ inputs.force_purge }}" == "true" ]]; then
            echo "**Mode:** Force purge (ignore diff)" >> "$STEP_SUMMARY"
            echo "" >> "$STEP_SUMMARY"

            if [ ${#CONFIGS[@]} -eq 0 ]; then
              echo "_No config YAML files found. Nothing to purge._" >> "$STEP_SUMMARY"
              echo "has_ref=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi

            # 从所有 config 中抽取被引用的 icons/rules 路径
            # 常见引用形态：直接写相对路径（icons/... 或 ./icons/...、rules/...）
            grep -RhoE '(\./)?(icons/[^"'"'"' ]+|rules/(ip|non_ip|domainset|yaml)/[^"'"'"' ]+)' "${CONFIGS[@]}" \
              | normalize_and_filter \
              | grep -E '^(icons/|rules/(ip|non_ip|domainset|yaml)/)' \
              > referenced.targets.txt || true

          else
            echo "**Mode:** Diff-based purge" >> "$STEP_SUMMARY"
            echo "" >> "$STEP_SUMMARY"

            BEFORE="${{ github.event.before }}"
            if [ -z "${BEFORE}" ]; then
              BEFORE="$(git rev-parse HEAD^ 2>/dev/null || echo '')"
            fi

            if [ -n "${BEFORE}" ]; then
              git diff --name-only "${BEFORE}" "${{ github.sha }}" | sort -u > changed.all.txt
            else
              : > changed.all.txt
            fi

            if [ -s changed.all.txt ]; then
              echo "**All changed files (diff ${BEFORE:0:7}..${{ github.sha }}):**" >> "$STEP_SUMMARY"
              sed 's/^/- /' changed.all.txt >> "$STEP_SUMMARY"
            else
              echo "_No changed files in diff._" >> "$STEP_SUMMARY"
            fi
            echo "" >> "$STEP_SUMMARY"

            # 只保留关心范围
            grep -E '^(icons/|rules/(ip|non_ip|domainset|yaml)/|config/[^/]+\.ya?ml)$' changed.all.txt \
              | sort -u > changed.targets.txt || true

            if [ -s changed.targets.txt ]; then
              echo "**Candidate targets:**" >> "$STEP_SUMMARY"
              sed 's/^/- /' changed.targets.txt >> "$STEP_SUMMARY"
              echo "" >> "$STEP_SUMMARY"
            else
              echo "_No candidate targets under icons/rules/config._" >> "$STEP_SUMMARY"
              echo "" >> "$STEP_SUMMARY"
            fi

            # 在配置文件中确认“被引用”的变更项（兼容 ./ 前缀）
            if [ ${#CONFIGS[@]} -gt 0 ] && [ -s changed.targets.txt ]; then
              while read -r P; do
                [ -n "$P" ] || continue
                if grep -RqlF -- "$P"           "${CONFIGS[@]}" \
                || grep -RqlF -- "./$P"         "${CONFIGS[@]}"; then
                  echo "$P" >> referenced.targets.txt
                fi
              done < changed.targets.txt
            fi
          fi

          # 去重
          if [ -s referenced.targets.txt ]; then
            sort -u -o referenced.targets.txt referenced.targets.txt
          fi

          # 仅保留实际存在的文件（避免无意义 purge）
          if [ -s referenced.targets.txt ]; then
            awk '{
              if ($0 ~ /\/$/) next;  # 排除目录
              if (system("[ -e \""$0"\" ]") == 0) print $0
            }' referenced.targets.txt > referenced.targets.existing.txt || true
            mv referenced.targets.existing.txt referenced.targets.txt
          fi

          if [ -s referenced.targets.txt ]; then
            echo "**Referenced targets (will purge @main):**" >> "$STEP_SUMMARY"
            sed 's/^/- /' referenced.targets.txt >> "$STEP_SUMMARY"
            echo "has_ref=true" >> "$GITHUB_OUTPUT"
          else
            echo "_No referenced targets found (nothing to purge)._ " >> "$STEP_SUMMARY"
            echo "has_ref=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Purge jsDelivr @main
        if: steps.detect.outputs.has_ref == 'true'
        shell: bash
        run: |
          set -euo pipefail
          : > purged.txt
          REPO="${{ github.repository }}"
          while read -r p; do
            [ -n "$p" ] || continue
            URL="https://purge.jsdelivr.net/gh/${REPO}@main/${p}"
            echo "Purging $URL"
            if curl -fsS "$URL" >/dev/null; then
              echo "$URL" >> purged.txt
            fi
          done < referenced.targets.txt

      - name: Summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          STEP_SUMMARY="${GITHUB_STEP_SUMMARY:-}"
          if [ -s purged.txt ]; then
            echo "" >> "$STEP_SUMMARY"
            echo "**Purged URLs (@main):**" >> "$STEP_SUMMARY"
            sed 's/^/- /' purged.txt >> "$STEP_SUMMARY"
            echo "" >> "$STEP_SUMMARY"
            echo "> Total purged: $(wc -l < purged.txt)" >> "$STEP_SUMMARY"
          else
            echo "" >> "$STEP_SUMMARY"
            echo "Nothing to purge." >> "$STEP_SUMMARY"
          fi
