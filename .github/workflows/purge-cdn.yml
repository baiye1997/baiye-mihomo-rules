name: Purge CDN

on:
  push:
    branches: ['**']
    tags-ignore: ['**']
    paths:
      - "rules/ip/**"
      - "rules/non_ip/**"
      - "rules/domainset/**"
      - "rules/yaml/**"
      - "icons/**"
      - "config/*.yaml"
      - "config/*.yml"
  workflow_dispatch: {}

concurrency:
  group: purge-cdn
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  release_purge:
    # 仅分支 push（忽略 tag push）
    if: ${{ github.event_name != 'push' || startsWith(github.ref, 'refs/heads/') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ startsWith(github.ref, 'refs/tags/') && 'main' || github.ref }}

      - name: Detect changed files & map to referenced targets (safe)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          BEFORE="${{ github.event.before }}"
          [ -z "$BEFORE" ] && BEFORE="$(git rev-parse HEAD^ 2>/dev/null || echo '')"

          if [ -n "$BEFORE" ]; then
            git diff --name-only "$BEFORE" "${{ github.sha }}" | sort -u > changed.all.txt
          else
            : > changed.all.txt
          fi

          grep -E '^(icons/|rules/(ip|non_ip|domainset|yaml)/)' changed.all.txt | sort -u > changed.targets.txt || true

          # 将真正被 config 引用到的目标筛出（避免无意义 purge）
          : > referenced.targets.txt
          shopt -s nullglob
          CONFIGS=(config/*.yml config/*.yaml)
          if [ ${#CONFIGS[@]} -gt 0 ] && [ -s changed.targets.txt ]; then
            while read -r P; do
              [ -n "$P" ] || continue
              if grep -RqlF -- "$P" "${CONFIGS[@]}"; then
                echo "$P" >> referenced.targets.txt
              fi
            done < changed.targets.txt
          fi

          if [ -s referenced.targets.txt ]; then
            echo "has_ref=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_ref=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Purge jsDelivr for referenced targets (@latest + @main)
        if: steps.detect.outputs.has_ref == 'true'
        id: purge
        shell: bash
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"
          : > purged.txt
          while read -r p; do
            [ -n "$p" ] || continue
            for REF in latest main; do
              URL="https://purge.jsdelivr.net/gh/${REPO}@${REF}/${p}"
              echo "Purging $URL"
              if curl -fsS "$URL" >/dev/null; then
                echo "$URL" >> purged.txt
              fi
            done
          done < referenced.targets.txt

      - name: Summary
        if: always()
        shell: bash
        run: |
          echo "## Purge result" >> "$GITHUB_STEP_SUMMARY"
          if [ "${{ steps.detect.outputs.has_ref }}" != "true" ]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "Nothing to purge." >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          if [ -s purged.txt ]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "**Purged URLs:**" >> "$GITHUB_STEP_SUMMARY"
            sed 's/^/- /' purged.txt >> "$GITHUB_STEP_SUMMARY"
          else
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "No URL purged (curl failed or empty set)." >> "$GITHUB_STEP_SUMMARY"
          fi
