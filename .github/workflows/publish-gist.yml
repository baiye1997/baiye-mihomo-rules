name: Publish Gists

on:
  push:
    paths:
      - 'icons/**'
      - 'rules/**'
      - 'config/baiye-multiple.yaml'
      - 'config/baiye-single.yaml'
  workflow_dispatch:
    inputs:
      force_full:
        description: 'Run full publish: always update multiple + mini + single, even if no changes'
        type: boolean
        default: false

concurrency:
  group: build-and-publish
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      FORCE_FULL: ${{ inputs.force_full && 'true' || 'false' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 取对比基准（push 事件有 before；手动触发就回退一个提交作比对，取不到就只看当前）
      - name: Detect changed files
        id: chg
        shell: bash
        run: |
          set -euo pipefail
          AFTER="${{ github.sha }}"
          BEFORE="${{ github.event.before }}"
          if [ -z "$BEFORE" ]; then BEFORE="$(git rev-parse "${AFTER}^" 2>/dev/null || echo '')"; fi

          if [ -n "$BEFORE" ]; then
            git diff --name-only "$BEFORE" "$AFTER" | sort -u > changed.all.txt
          else
            git ls-files | sort -u > changed.all.txt
          fi

          # 仅保留 icons/** 和 rules/** 明细（用于“被引用”判断）
          grep -E '^(icons/|rules/)' changed.all.txt | sort -u > changed.targets.txt || true

          # 标记两个 config 是否直接变更
          MULTI_CHANGED=false
          SINGLE_CHANGED=false
          grep -qx "config/baiye-multiple.yaml" changed.all.txt && MULTI_CHANGED=true
          grep -qx "config/baiye-single.yaml"   changed.all.txt && SINGLE_CHANGED=true

          echo "multi_changed=${MULTI_CHANGED}"   >> $GITHUB_OUTPUT
          echo "single_changed=${SINGLE_CHANGED}" >> $GITHUB_OUTPUT

          echo "Changed files:" && cat changed.all.txt || true
          echo "Changed targets (icons/rules):" && cat changed.targets.txt || true

      # 是否需要发布 multiple（规则：force_full=true || config直接改 || icons/rules有改且在该config中被引用）
      - name: Decide need (multiple)
        id: need_multi
        shell: bash
        run: |
          set -euo pipefail
          NEED=false
          if [ "${FORCE_FULL}" = "true" ]; then
            NEED=true
          elif [ "${{ steps.chg.outputs.multi_changed }}" = "true" ]; then
            NEED=true
          elif [ -s changed.targets.txt ] && [ -f config/baiye-multiple.yaml ]; then
            while IFS= read -r p; do
              [ -z "$p" ] && continue
              if grep -Fq "$p" config/baiye-multiple.yaml; then
                NEED=true
                break
              fi
            done < changed.targets.txt
          fi
          echo "need=${NEED}" >> $GITHUB_OUTPUT
          echo "need-multiple=${NEED}"

      # 是否需要发布 single（同理）
      - name: Decide need (single)
        id: need_single
        shell: bash
        run: |
          set -euo pipefail
          NEED=false
          if [ "${FORCE_FULL}" = "true" ]; then
            NEED=true
          elif [ "${{ steps.chg.outputs.single_changed }}" = "true" ]; then
            NEED=true
          elif [ -s changed.targets.txt ] && [ -f config/baiye-single.yaml ]; then
            while IFS= read -r p; do
              [ -z "$p" ] && continue
              if grep -Fq "$p" config/baiye-single.yaml; then
                NEED=true
                break
              fi
            done < changed.targets.txt
          fi
          echo "need=${NEED}" >> $GITHUB_OUTPUT
          echo "need-single=${NEED}"

      - name: Setup Node
        if: steps.need_multi.outputs.need == 'true' || steps.need_single.outputs.need == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # multiple + mini：先替换订阅&加 icon 短哈希，发布 multiple；再把 geodata-loader: standard -> memconservative 得到 mini 一起发
      - name: Build & Publish (multiple + mini)
        if: steps.need_multi.outputs.need == 'true'
        env:
          SUB_URL_1: ${{ secrets.SUB_URL_1 }}
          SUB_URL_2: ${{ secrets.SUB_URL_2 }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
          CONFIG_PATH: config/baiye-multiple.yaml
          COMMIT_SHORT: ${{ github.sha }}
          GIST_FILE_MULTIPLE: baiye-multiple.yaml
          GIST_FILE_MINI: BaiyeMini.yaml
        run: |
          export COMMIT_SHORT="${COMMIT_SHORT:0:7}"
          node - <<'NODE'
          const fs = require('fs');
          const https = require('https');
          const path = require('path');

          const short = (process.env.COMMIT_SHORT || 'dev').slice(0, 7);
          const gistFileMultiple = process.env.GIST_FILE_MULTIPLE || 'baiye-multiple.yaml';
          const gistFileMini = process.env.GIST_FILE_MINI || 'BaiyeMini.yaml';

          function patchGist({ gistId, token, filename, content }) {
            return new Promise((resolve, reject) => {
              const body = JSON.stringify({ files: { [filename]: { content } } });
              const req = https.request(
                `https://api.github.com/gists/${gistId}`,
                {
                  method: 'PATCH',
                  headers: {
                    Authorization: `token ${token}`,
                    'User-Agent': 'github-actions',
                    Accept: 'application/vnd.github+json',
                    'Content-Type': 'application/json',
                    'Content-Length': Buffer.byteLength(body),
                  },
                },
                (res) => {
                  let data = '';
                  res.on('data', (d) => (data += d));
                  res.on('end', () => {
                    if (res.statusCode >= 200 && res.statusCode < 300) {
                      try { resolve(JSON.parse(data)); } catch { resolve({}); }
                    } else {
                      reject(new Error(`Gist update failed ${res.statusCode}: ${data}`));
                    }
                  });
                }
              );
              req.on('error', reject);
              req.write(body);
              req.end();
            });
          }

          function bumpIconsV(s) {
            const re = /(https?:\/\/[^\s"'<>]+\/icons\/[^\s"'<>]+\.(?:png|jpe?g|webp|svg)(?:\?[^\s"'<>]*)?)/gi;
            return s.replace(re, (full) => {
              try {
                const u = new URL(full);
                u.searchParams.set('v', short);
                return u.toString();
              } catch {
                return full;
              }
            });
          }

          (async () => {
            const sub1 = process.env.SUB_URL_1;
            const sub2 = process.env.SUB_URL_2;
            const gistToken = process.env.GIST_TOKEN;
            const gistId = process.env.GIST_ID;

            if (!sub1 || !sub2) throw new Error('Missing SUB_URL_1 or SUB_URL_2');
            if (!gistToken || !gistId) throw new Error('Missing GIST_TOKEN or GIST_ID');

            const srcRel = process.env.CONFIG_PATH || 'config/baiye-multiple.yaml';
            const srcPath = path.resolve(srcRel);
            if (!fs.existsSync(srcPath)) throw new Error(`${srcRel} not found`);

            const raw = fs.readFileSync(srcPath, 'utf8');

            const withIconV = bumpIconsV(raw);
            const outMultiple = withIconV
              .replace(/替换订阅链接1/g, sub1)
              .replace(/替换订阅链接2/g, sub2)
              .replace(/\[显示名称A可修改\]/g, '[Haita]')
              .replace(/\[显示名称B可修改\]/g, '[BoostNet]');

            fs.writeFileSync('baiye-multiple.generated.yaml', outMultiple, 'utf8');
            const res1 = await patchGist({
              gistId, token: gistToken, filename: gistFileMultiple, content: outMultiple
            });
            console.log('✅ multiple updated:', res1?.files?.[gistFileMultiple]?.raw_url);

            const outMini = outMultiple.replace(/geodata-loader:\s*standard/g, 'geodata-loader: memconservative');
            fs.writeFileSync('BaiyeMini.generated.yaml', outMini, 'utf8');
            const res2 = await patchGist({
              gistId, token: gistToken, filename: gistFileMini, content: outMini
            });
            console.log('✅ mini updated:', res2?.files?.[gistFileMini]?.raw_url);

            console.log(`::notice title=Gist Updated::${res1?.files?.[gistFileMultiple]?.raw_url}\n${res2?.files?.[gistFileMini]?.raw_url}`);
          })().catch((err) => {
            console.error('❌', err.message || err);
            process.exit(1);
          });
          NODE

      # single：替换订阅 & icon 短哈希，发布
      - name: Build & Publish (single)
        if: steps.need_single.outputs.need == 'true'
        env:
          SUB_URL_1: ${{ secrets.SUB_URL_1 }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
          CONFIG_PATH: config/baiye-single.yaml
          COMMIT_SHORT: ${{ github.sha }}
          GIST_FILE_SINGLE: baiye-single.yaml
        run: |
          export COMMIT_SHORT="${COMMIT_SHORT:0:7}"
          node - <<'NODE'
          const fs = require('fs');
          const https = require('https');
          const path = require('path');

          const short = (process.env.COMMIT_SHORT || 'dev').slice(0, 7);
          const gistFileSingle = process.env.GIST_FILE_SINGLE || 'baiye-single.yaml';

          function patchGist({ gistId, token, filename, content }) {
            return new Promise((resolve, reject) => {
              const body = JSON.stringify({ files: { [filename]: { content } } });
              const req = https.request(
                `https://api.github.com/gists/${gistId}`,
                {
                  method: 'PATCH',
                  headers: {
                    Authorization: `token ${token}`,
                    'User-Agent': 'github-actions',
                    Accept: 'application/vnd.github+json',
                    'Content-Type': 'application/json',
                    'Content-Length': Buffer.byteLength(body),
                  },
                },
                (res) => {
                  let data = '';
                  res.on('data', (d) => (data += d));
                  res.on('end', () => {
                    if (res.statusCode >= 200 && res.statusCode < 300) {
                      try { resolve(JSON.parse(data)); } catch { resolve({}); }
                    } else {
                      reject(new Error(`Gist update failed ${res.statusCode}: ${data}`));
                    }
                  });
                }
              );
              req.on('error', reject);
              req.write(body);
              req.end();
            });
          }

          function bumpIconsV(s) {
            const re = /(https?:\/\/[^\s"'<>]+\/icons\/[^\s"'<>]+\.(?:png|jpe?g|webp|svg)(?:\?[^\s"'<>]*)?)/gi;
            return s.replace(re, (full) => {
              try {
                const u = new URL(full);
                u.searchParams.set('v', short);
                return u.toString();
              } catch {
                return full;
              }
            });
          }

          (async () => {
            const sub1 = process.env.SUB_URL_1;
            const gistToken = process.env.GIST_TOKEN;
            const gistId = process.env.GIST_ID;

            if (!sub1) throw new Error('Missing SUB_URL_1');
            if (!gistToken || !gistId) throw new Error('Missing GIST_TOKEN or GIST_ID');

            const srcRel = process.env.CONFIG_PATH || 'config/baiye-single.yaml';
            const srcPath = path.resolve(srcRel);
            if (!fs.existsSync(srcPath)) throw new Error(`${srcRel} not found`);

            const raw = fs.readFileSync(srcPath, 'utf8');

            const withIconV = bumpIconsV(raw);
            const outSingle = withIconV.replace(/替换订阅链接1/g, sub1);

            fs.writeFileSync('baiye-single.generated.yaml', outSingle, 'utf8');
            const res = await patchGist({
              gistId, token: gistToken, filename: gistFileSingle, content: outSingle
            });

            console.log('✅ single updated:', res?.files?.[gistFileSingle]?.raw_url);
            console.log(`::notice title=Gist Updated (single)::${res?.files?.[gistFileSingle]?.raw_url}`);
          })().catch((err) => {
            console.error('❌', err.message || err);
            process.exit(1);
          });
          NODE

      - name: Upload artifacts (optional)
        if: steps.need_multi.outputs.need == 'true' || steps.need_single.outputs.need == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: built-configs
          path: |
            baiye-multiple.generated.yaml
            BaiyeMini.generated.yaml
            baiye-single.generated.yaml
